{"version":3,"sources":["reducers/todos.js","reducers/visibilityFilter.js","reducers/index.js","actions/index.js","components/Link.js","components/FilterLink.js","components/Footer.js","components/AddTodo.js","components/Todo.js","components/TodoList.js","components/VisibleTodoList.js","components/App.js","serviceWorker.js","index.js"],"names":["todo","state","action","type","id","text","completed","Object","objectSpread","todos","arguments","length","undefined","concat","toConsumableArray","map","t","visibilityFilter","filter","todoApp","combineReducers","nextTodoId","Link","_ref","active","children","onClick","react_default","a","createElement","href","e","preventDefault","FilterLink","connect","ownProps","dispatch","Footer","components_FilterLink","input","onSubmit","value","trim","toString","ref","node","Todo","style","textDecoration","TodoList","onTodoClick","components_Todo","assign","key","getVisibleTodos","console","log","Error","VisibleTodoList","toggleTodo","App","components_AddTodo","components_VisibleTodoList","components_Footer","Boolean","window","location","hostname","match","store","createStore","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cebb45f5.chunk.js","sourcesContent":["const todo = (state, action) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return {\n        id: action.id,\n        text: action.text,\n        completed: false,\n      };\n    case 'TOGGLE_TODO':\n      if (state.id !== action.id) {\n        return state;\n      }\n      return {\n        ...state,\n        completed: !state.completed,\n      };\n    default:\n      return state;\n  }\n};\n\nconst todos = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [\n        ...state,\n        todo(undefined, action),\n      ];\n    case 'TOGGLE_TODO':\n      return state.map(t =>\n        todo(t, action)\n      );\n    default:\n      return state;\n  }\n};\n\nexport default todos;","const visibilityFilter = (state = 'SHOW_ALL', action) => {\n  switch (action.type) {\n    case 'SET_VISIBILITY_FILTER':\n      return action.filter;\n    default:\n      return state;\n  }\n};\n\nexport default visibilityFilter;","import { combineReducers } from 'redux';\nimport todos from './todos';\nimport visibilityFilter from './visibilityFilter';\n\nconst todoApp = combineReducers({\n  todos,\n  visibilityFilter,\n});\n\nexport default todoApp;","let nextTodoId = 0;\nexport const addTodo = (text) => ({\n  type: 'ADD_TODO',\n  id: (nextTodoId++).toString(),\n  text,\n});\n\nexport const setVisibilityFilter = (filter) => ({\n  type: 'SET_VISIBILITY_FILTER',\n  filter,\n});\n\nexport const toggleTodo = (id) => ({\n  type: 'TOGGLE_TODO',\n  id,\n});","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Link = ({ active, children, onClick }) => {\n  if (active) {\n    return <span>{children}</span>;\n  }\n  return (\n    <a\n      href=\"#placeholder\"\n      onClick={e => {\n        e.preventDefault();\n        onClick();\n      }}\n    >\n      {children}\n    </a>\n  );\n};\n\nLink.propTypes = {\n  active: PropTypes.bool,\n  children: PropTypes.node.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Link;","import { connect } from 'react-redux';\nimport { setVisibilityFilter } from '../actions';\nimport Link from './Link';\n\nconst mapStateToProps = (state, ownProps) => ({\n  active: ownProps.filter === state.visibilityFilter,\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  onClick() {\n    dispatch(setVisibilityFilter(ownProps.filter));\n  },\n});\n\nconst FilterLink = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Link);\n\nexport default FilterLink;","import React from 'react';\nimport FilterLink from './FilterLink';\n\nconst Footer = () => (\n  <p>\n    Show:\n    {\" \"}\n    <FilterLink filter=\"SHOW_ALL\">\n      All\n    </FilterLink>\n    {\", \"}\n    <FilterLink filter=\"SHOW_ACTIVE\">\n      Active\n    </FilterLink>\n    {\", \"}\n    <FilterLink filter=\"SHOW_COMPLETED\">\n      Completed\n    </FilterLink>\n  </p>\n);\n\nexport default Footer;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { addTodo } from '../actions';\n\nconst AddTodo = ({ dispatch }) => {\n  let input;\n\n  return (\n    <div>\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          if (!input.value.trim()) {\n            return;\n          }\n          dispatch(addTodo(input.value));\n          input.value = '';\n        }}\n      >\n        <input ref={node => { input = node; }} />\n        <button type=\"submit\">\n          Add Todo\n        </button>\n      </form>\n    </div>\n  );\n};\n\nAddTodo.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n};\n\nexport default connect()(AddTodo);","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Todo = ({ onClick, completed, text }) => (\n  <li\n    onClick={onClick}\n    style={{\n      textDecoration: completed ? 'line-through' : 'none',\n    }}\n  >\n    {text}\n  </li>\n);\n\nTodo.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  completed: PropTypes.bool.isRequired,\n  text: PropTypes.string.isRequired,\n};\n\nexport default Todo;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Todo from './Todo';\n\nconst TodoList = ({ todos, onTodoClick }) => (\n  <ul>\n    {todos.map(todo =>\n      <Todo\n        key={todo.id}\n        {...todo}\n        onClick={() => onTodoClick(todo.id)}\n      />\n    )}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n    text: PropTypes.string.isRequired,\n  }).isRequired).isRequired,\n  onTodoClick: PropTypes.func.isRequired,\n};\n\nexport default TodoList;","import { connect } from 'react-redux';\nimport { toggleTodo } from '../actions';\nimport TodoList from './TodoList';\n\nconst getVisibleTodos = (todos, filter) => {\n  console.log('todos');\n  console.log(todos);\n\n  switch (filter) {\n    case 'SHOW_ALL':\n      return todos;\n    case 'SHOW_COMPLETED':\n      return todos.filter(t => t.completed);\n    case 'SHOW_ACTIVE':\n      return todos.filter(t => !t.completed);\n    default:\n      throw new Error(`Unknown filter: ${filter}.`);\n  }\n};\n\nconst mapStateToProps = (state) => ({\n  todos: getVisibleTodos(state.todos, state.visibilityFilter),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onTodoClick(id) {\n    dispatch(toggleTodo(id));\n  },\n});\n\nconst VisibleTodoList = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoList);\n\nexport default VisibleTodoList;","import React from 'react';\nimport Footer from './Footer';\nimport AddTodo from './AddTodo';\nimport VisibleTodoList from './VisibleTodoList';\n\nconst App = () => (\n  <div>\n    <AddTodo />\n    <VisibleTodoList />\n    <Footer />\n  </div>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'babel-polyfill';\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport todoApp from './reducers';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(todoApp);\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}